#
# Hand-crafted FEA code
#

languagesystem DFLT dflt;
languagesystem lepc dflt;


#********************************************
# Font rendering check
#
# The following three lookups change "RenderingUnknown" to "RenderingOpenType"

lookup _FontCheck_Unknow {
  lookupflag IgnoreMarks;
    sub [U n k o w ] by [O p e T y];
} _FontCheck_Unknow;

lookup _FontCheck_n {
  lookupflag IgnoreMarks;
    sub n by p e;
} _FontCheck_n;

lookup FontCheck {
  lookupflag IgnoreMarks ;
    sub [R] e n d e r i n g 
      U' lookup _FontCheck_Unknow 
      n' lookup _FontCheck_Unknow
      k' lookup _FontCheck_Unknow
      n'  
      o' lookup _FontCheck_Unknow 
      w' lookup _FontCheck_Unknow 
      n' lookup _FontCheck_n;
} FontCheck;


#********************************************
# Substitution lookups
#

lookup MarkLeftSide {
   # Mark left-side vowels as having been reordered:
   sub [ uni1C27  uni1C28 ]  by  [ uni1C27left  uni1C28left ] ;
} MarkLeftSide ; 


#--- Create ligatures for forms with nuktas --

# This is a kludge for InDesign which does not handle the nuktas correctly
# (cons signs following forms with nuktas are not attached).
# Here we only handle nuktas that happen in real life.

@ConsNukta = [ uni1C101C37  uni1C191C37  uni1C1B1C37  uni1C211C37  
		uni1C001C371C25  uni1C001C371C24  uni1C001C371C251C24
		uni1C031C371C25  uni1C031C371C24  uni1C031C371C251C24
		uni1C131C371C25
		uni1C1D1C371C25  uni1C1D1C371C24  uni1C1D1C371C251C24] ;

lookup NuktaLigs {

	sub uni1C10  uni1C37  by  uni1C101C37 ;
	sub uni1C19  uni1C37  by  uni1C191C37 ;
	sub uni1C1B  uni1C37  by  uni1C1B1C37 ;
	sub uni1C21  uni1C37  by  uni1C211C37 ;
	
	sub uni1C00  uni1C37  uni1C25           by  uni1C001C371C25 ;
	sub uni1C00  uni1C37  uni1C24           by  uni1C001C371C24 ;
	sub uni1C00  uni1C37  uni1C25  uni1C24  by  uni1C001C371C251C24 ;
	sub uni1C03  uni1C37  uni1C25           by  uni1C031C371C25 ;
  sub uni1C03  uni1C37  uni1C24           by  uni1C031C371C24 ;
	sub uni1C03  uni1C37  uni1C25  uni1C24  by  uni1C031C371C251C24 ;
	sub uni1C13  uni1C37  uni1C25           by  uni1C131C371C25 ;
	sub uni1C1D  uni1C37  uni1C25           by  uni1C1D1C371C25 ;
	sub uni1C1D  uni1C37  uni1C24           by  uni1C1D1C371C24 ;
	sub uni1C1D  uni1C37  uni1C25  uni1C24  by  uni1C1D1C371C251C24 ;
	
} NuktaLigs;


# Move final mark onto Vtl ligature
# This should be done before built-in OT reordering.

@MarksOnVtl =  [ uni1C2D      uni1C2E    uni1C2F     uni1C30     uni1C31     uni1C32     uni1C33     uni1C35     ] ;
@VtlPlusMark = [ uni1C291C2D uni1C291C2E uni1C291C2F uni1C291C30 uni1C291C31 uni1C291C32 uni1C291C33 uni1C291C35 ] ;

lookup VtlMarkLig {
		sub uni1C29'  @MarksOnVtl' by  @VtlPlusMark;
} VtlMarkLig ;


#--- Ra/Ya ligatures ---

@Cons =   [  #uni25CC
		uni1C00  uni1C01  uni1C02  uni1C03  uni1C04  uni1C05  uni1C06  uni1C07  uni1C08
		uni1C09  uni1C0A  uni1C0B  uni1C0C  uni1C0D  uni1C0E  uni1C0F  uni1C10  uni1C11  uni1C12
		uni1C13  uni1C14  uni1C15  uni1C16  uni1C17  uni1C18  uni1C19  uni1C1A  uni1C1B  uni1C1C
		uni1C1D  uni1C1E  uni1C1F  uni1C20  uni1C21  uni1C22  uni1C23  uni1C4D  uni1C4E  uni1C4F ] ;

@TakesYa = [
		uni1C00      uni1C01      uni1C02      uni1C03      uni1C04      uni1C05      uni1C0A      uni1C0B
    uni1C0C      uni1C0E      uni1C0F      uni1C10      uni1C11      uni1C12      uni1C13      uni1C14  
    uni1C15      uni1C16      uni1C1B      uni1C1C      uni1C1D      uni1C1E      uni1C1F      uni1C21      uni1C23 ] ;
@ConsYa = [
		uni1C001C24  uni1C011C24  uni1C021C24  uni1C031C24  uni1C041C24  uni1C051C24  uni1C0A1C24  uni1C0B1C24
    uni1C0C1C24  uni1C0E1C24  uni1C0F1C24  uni1C101C24  uni1C111C24  uni1C121C24  uni1C131C24  uni1C141C24
    uni1C151C24  uni1C161C24  uni1C1B1C24  uni1C1C1C24  uni1C1D1C24  uni1C1E1C24  uni1C1F1C24  uni1C211C24  uni1C231C24 ] ;

@TakesRaAndRaYa = [ 
    uni1C00          uni1C03          uni1C05          uni1C0E          uni1C11
    uni1C13          uni1C15          uni1C1D ] ;
@ConsRa =     [
    uni1C001C25      uni1C031C25      uni1C051C25      uni1C0E1C25      uni1C111C25
    uni1C131C25      uni1C151C25      uni1C1D1C25 ] ;
@ConsRaYa =  [
    uni1C001C251C24  uni1C031C251C24  uni1C051C251C24  uni1C0E1C251C24  uni1C111C251C24
    uni1C131C251C24  uni1C151C251C24  uni1C1D1C251C24 ] ;
    
lookup RaYaLigatures {

	lookupflag IgnoreMarks;
  	sub @TakesYa         uni1C24           by  @ConsYa ;
  	sub @TakesRaAndRaYa  uni1C25           by  @ConsRa ;
  	sub @TakesRaAndRaYa  uni1C25  uni1C24  by  @ConsRaYa ;
  	
} RaYaLigatures;



@ConsAll = [ @Cons  @ConsYa  @ConsRa  @ConsRaYa  @ConsNukta ] ;

@N = [ uni1C37 ] ;
@K = [ uni1C35 ] ;
@Ran   = [ uni1C36 ] ;

# top-left vowel (1C29) with cons-sign marks:
@VtlAll = [ uni1C29  uni1C291C2D uni1C291C2E uni1C291C2F uni1C291C30 uni1C291C31 uni1C291C32 uni1C291C33 uni1C291C35 ] ;

@Vright = [ uni1C26  uni1C2A  uni1C2B ] ;
@Vleft =  [ uni1C27  uni1C28 ] ;
@Vbottom = [uni1C2C ] ;
@Vrb = [ @Vright  @Vbottom ] ;


@Left = [ @VtlAll  @Vleft  uni1C34  uni1C35 ] ;
@LeftWRan = [ @VtlAll ] ;  # left vowels that also require moving the Ran (NOT left consonants)

@Vall = [ @Vright  @VtlAll  @Vleft  @Vbottom ];

@BogusNull = [ uniE000 ] ;

# Delete the original vowel (and ran or kang) that has now been moved to the left.
lookup _del_extra {
		sub      @ConsAll' @LeftWRan'  @Ran' by  @ConsAll;   # delete left-side vowel and ran
		sub @Ran @ConsAll' @Left'            by  @ConsAll;   # delete left-side vowel/cons sign and ran
		sub      @ConsAll' @Left'            by  @ConsAll;   # delete left-side vowel
		sub                @Vrb'       @K'   by  @Vrb;       # delete kang
		sub                @ConsAll'   @K'   by  @ConsAll;
} _del_extra ;


#--- Reorder left-vowel and kang (when nukta is present) ---

# KLUDGE needed for InDesign which doesn't do reordering.

# Alternate kang glyph which will not be reordered a second time:
@Kleft = [ uni1C35left ];


lookup _ins_V1C27K { sub @ConsAll  by  @Kleft  uni1C27  @ConsAll;   } _ins_V1C27K ;
lookup _ins_V1C28K { sub @ConsAll  by  @Kleft  uni1C28  @ConsAll;   } _ins_V1C28K ;

lookup  _del_VleftK {
	sub  @ConsAll'  @Vleft'  @K'  by  @ConsAll;
#	sub  @N'        @Vleft'  @K'  by  @N;
	sub  @N         @Vleft'  @K'  by  @BogusNull;  # - doesn't work; see kludge in Reorder_CryN_V_delV
} _del_VleftK ;

lookup _dbl_V1C27K { sub @ConsAll  by  @Kleft  uni1C27  @ConsAll @K;  } _dbl_V1C27K ;
lookup _dbl_V1C28K { sub @ConsAll  by  @Kleft  uni1C28  @ConsAll @K;  } _dbl_V1C28K ;

lookup Reorder_CryN_VK {

	# C V K -> K V C V K -> 
	sub  @ConsAll' lookup _ins_V1C27K  uni1C27'  uni1C35' lookup _del_VleftK ;
	sub  @ConsAll' lookup _ins_V1C28K  uni1C28'  uni1C35' lookup _del_VleftK ;
	
	# C N V K ->  K V C K N V K -> K V C N V K -> K V C N
	sub  @ConsAll' lookup _dbl_V1C27K  @N'  uni1C27' lookup _del_extra  @K' lookup _del_VleftK ;
	sub  @ConsAll' lookup _dbl_V1C28K  @N'  uni1C28' lookup _del_extra  @K' lookup _del_VleftK ;
	
} Reorder_CryN_VK ;


#--- Reorder Kang (after left-side vowel) ---

# KLUDGE needed for InDesign which doesn't do reordering.

lookup _ins_Kang { sub @ConsAll  by  @Kleft  @ConsAll  @K; } _ins_Kang ;

lookup _del_extra_K { sub @ConsAll  @K  by  @ConsAll; } _del_extra_K;

lookup Reorder_CryNV_K {

	# C V K -> K C V K -> K C V 
	sub  @ConsAll' lookup _ins_Kang                            @Vrb' lookup _del_extra_K  @K' lookup _del_extra ;
	sub  @ConsAll' lookup _ins_Kang   @N' lookup _del_extra_K  @Vrb'                      @K' lookup _del_extra ;

} Reorder_CryNV_K ;


lookup Reorder_CryN_delVK {

	# After reordering Vleft + Kang, delete them from the left so we don't end up
	# reordering the V again when we do the main part of the reordering.
	do  for v = @Vleft;
	    { sub  @N        $v'  @K'  by  @BogusNull ;
	      sub  @ConsAll  $v'  @K'  by  @BogusNull ;
	    }
	
} Reorder_CryN_delVK ;



#--- Reorder ---

# This should be done automatically by the engines but not all do.
# For Harfbuzz we need to reorder the top-left vowel (1C29), but for InDesign we have to do all the reordering.

# auxilary lookups used in chains

do  for g = [ @VtlAll  @Vleft  uni1C34  uni1C35 ];  # + cons signs
		let nameI = "_ins_" + g;
		let nameD = "_dbl_" + g;
		{
		# lookup _ins_uni1C29 { sub @ConsAll by uni1C29 @ConsAll; } _ini_uni1C29 ;
			lookup $nameI       { sub @ConsAll by $g      @ConsAll; } $nameI ;                  # C -> V C; also cons signs
			
		# lookup _del_uni1C29 { sub @ConsAll by uni1C29 @ConsAll; uni1C29 } _dbl_uni1C29 ;
			lookup $nameD       { sub @ConsAll by $g      @ConsAll  $g;     } $nameD ;          # C -> V C V
		}


do  for g = [ @VtlAll  @Vleft ];
		let nameI = "_ins_" + g + "Ran";
		let nameD = "_dbl_" + g + "Ran";
		{
		# lookup _ins_uni1C29Ran { sub @ConsAll by uni1C29 @Ran @ConsAll; } _ins_uni1C29Ran ;
			lookup $nameI          { sub @ConsAll by $g      @Ran @ConsAll; } $nameI ;                     # C -> V R C;
			
		# lookup _dbl_uni1C29Ran { sub @ConsAll by uni1C29 @Ran @ConsAll uni1C29; } $_dbl_uni1C29Ran ;
			lookup $nameD          { sub @ConsAll by $g      @Ran @ConsAll $g;      } $nameD ;             # C -> V R C V
		}

lookup _delete_dup {
	sub  @N  @LeftWRan  @Ran  by  @N ;
  sub  @N  @Left            by  @N ;  # this won't work when the nukta was in a cons cluster, see kludge in Reorder_CryN_V_delV
} _delete_dup ;

# main lookups

# put longer rules first - those including the Ran
lookup Reorder_CryN_VR {

	do  for g = [ @VtlAll ];
			let nameD = "_dbl_" + g + "Ran";
			{
				# C N V R -> V R C V N V R -> V R C N V R -> V C N
			# sub  @ConsAll' lookup _dbl_uni1C29Ran  @N'  uni1C29' lookup _del_extra  @Ran' lookup _delete_dup ;
				sub  @ConsAll' lookup $nameD           @N'  $g'      lookup _del_extra  @Ran' lookup _delete_dup ;
			}
 
} Reorder_CryN_VR ;

lookup Reorder_Cry_VR {

	do	for g = [ @VtlAll ];
			let nameI = "_ins_" + g + "Ran";
			{
				# C V R -> V R C V -> V R C
			#	sub  @ConsAll' lookup _ins_uni1C29Ran  uni1C29'  @Ran' lookup _del_extra ;
				sub  @ConsAll' lookup $nameI           $g'       @Ran' lookup _del_extra ;
			
			}
  
} Reorder_Cry_VR ;

lookup Reorder_CryN_V {

	do  for g = [ @VtlAll ];
			let nameD = "_dbl_" + g;
			{
				# C N V -> V C V N V -> V C N V -> V C N
			#	sub  @ConsAll' lookup _dbl_uni1C29  @N' lookup _del_extra  uni1C29' lookup _delete_dup ;
				sub  @ConsAll' lookup $nameD        @N' lookup _del_extra  $g'      lookup _delete_dup ;
			}

} Reorder_CryN_V ;

# InDesign only:
lookup Reorder_CryN_VallC {  # also handles cons signs

	do  for g = [ @Vleft  uni1C34  uni1C35 ];
			let nameD = "_dbl_" + g;
			{
				# C N V -> V C V N V -> V C N V -> V C N
			#	sub  @ConsAll' lookup _dbl_uni1C29  @N' lookup _del_extra  uni1C29' lookup _delete_dup ;
				sub  @ConsAll' lookup $nameD        @N' lookup _del_extra  $g'      lookup _delete_dup ;
			}

} Reorder_CryN_VallC ;


lookup Reorder_Cry_V {

	do  for g = [ @VtlAll  @Vleft  uni1C34  uni1C35 ];
			let nameI = "_ins_" + g;
			{
				# C V -> V C V -> V C
			#	sub  @ConsAll' lookup _ins_uni1C29  uni1C29' lookup _del_extra ;
				sub  @ConsAll' lookup $nameI        $g'      lookup _del_extra ;
			}
  
} Reorder_Cry_V ;

# InDesign only:
lookup Reorder_Cry_VallC {  # also handles cons signs

	do  for g = [ @Vleft  uni1C34  uni1C35 ];
			let nameI = "_ins_" + g;
			{
				# C V -> V C V -> V C
			#	sub  @ConsAll' lookup _ins_uni1C29  uni1C29' lookup _del_extra ;
				sub  @ConsAll' lookup $nameI        $g'      lookup _del_extra ;
			}
  
} Reorder_Cry_VallC ;


@M = [ uni1C2D  uni1C2E  uni1C2F  uni1C30  uni1C31  uni1C32  uni1C33 ] ;

lookup Reorder_CryN_V_delV {

	sub @Left'  @M'  by  @M ;
	
	# When the nukta was in the middle of what is now a ligature, we can't do N+V -> N to delete the left-side V/sign.
	# So instead we replace just the vowel/sign with a bogus null glyph.
	# IT IS RISKY TO INCLUDE BOGUS GLYPHS, so be sure to take this out again at the end of the process.
	do  for v = @Left;
		  { sub @N  $v' @Ran'    by  @BogusNull ; }
	
	do  for v = @Vleft;
	    { sub  @N  $v' @K'  by  @BogusNull ; }
	
	sub  @Vright  @K'  by  @BogusNull ;   # InDesign only
	
	sub  @N  @Left'  by  @BogusNull ;     # InDesign only
	
} Reorder_CryN_V_delV ;


#--- Reorder top mark and right-side vowel ---

# This is necessary for the mark to be attached to the preceding consonant.

do	for m = @M;
		let name = "_insM_" + m;
		let nameR = "_insM_" + m + "_R";
		{
		# lookup _insM_uni1C2D { sub  @Vright  by  uni1C2D  @Vright; } _insM_uni1C2D ;
			lookup $name         { sub  @Vright  by  $m       @Vright; }  $name ;
			
		# lookup _insM_uni1C2D_R { sub  @Vright  by  uni1C2D  @Ran  @Vright; } _insM_uni1C2D_R ;
			lookup $nameR          { sub  @Vright  by  $m       @Ran  @Vright; } $nameR ;
		}

lookup _insM_Ran { sub  @Vright  by  @Ran  @Vright; } _insM_Ran ;  # Ran alone


@Mtop = [ @M  uni1C36 ];

lookup _delMark {
	sub  @Vright  @Mtop  @Ran  by  @Vright ;
	sub  @Vright  @Mtop        by  @Vright ; 
} _delMark ;

# I'm not sure that it's really necessary to include the consonant and nukta in the context
# of these rules, but it feels safer.

@ConsOrN = [ @ConsAll  @N ];

lookup Reorder_Vrt_Mt {
  # We should be able to use the following statement and remove the rules with the
  # nuktas, but that seemed to break the entire lookup. Instead I just merged the
  # consonants and nukta into one class.
	#lookupflag UseMarkFilteringSet @N ;
	
	do	for m = @M;
			let name = "_insM_" + m;
			let nameR = "_insM_" + m + "_R";
			{
				# C V M R  ->  C M R V M R  ->  C M R V
			#	sub @ConsOrN  @Vright' lookup _insM_uni1C2D_R  uni1C2D'  @Ran' lookup _delMark ;
				sub @ConsOrN  @Vright' lookup $nameR           $m'       @Ran' lookup _delMark ;
				
				# C V M  ->  C M V M  ->  C M V
			#	sub @ConsOrN  @Vright' lookup _insM_uni1C2D  uni1C2D' lookup _delMark ;
				sub @ConsOrN  @Vright' lookup $name          $m'      lookup _delMark ;
			}
			
	sub @ConsOrN  @Vright' lookup _insM_Ran  @Ran' lookup _delMark ;
	
} Reorder_Vrt_Mt ;


#--- Delete bogus null glyph that was used as a kludge ---

# They only occur at the end of syllables, after cons ligatures + nuktas + top-left vowel.

@RaYaLigs = [ @ConsRa  @ConsYa  @ConsRaYa ] ;

lookup DeleteBogusNull {
	lookupflag IgnoreMarks ;
		sub  @ConsAll  @BogusNull  by  @ConsAll ;
		sub  @Vright   @BogusNull  by  @Vright ;
} DeleteBogusNull ;

lookup DeleteBogusNull2 {
	lookupflag 0;
		sub  @N  @BogusNull  by  @N;
} DeleteBogusNull2 ;


#--- Vowel-sign-I + Kang ligature ---

@Kall = [ uni1C35  uni1C35left ];
@Iall = [ uni1C27  uni1C27left ];

lookup SignIKang {
	lookupflag IgnoreMarks;
	  # If the reordering was done by the client engine, the kang will be the original, uni1C35.
	  # If it was done by the OT code, it will be uni1C35left.
	  
	  do  for k = @Kall;
        for i = @Iall;
	      { sub  $k  $i  by  uni1C271C35; }  # note that they have been reordered

} SignIKang ;


#********************************************
# Positioning lookups
#

#markClass uni1C37 <anchor -409 -180> @_N;

lookup AttachMarks {
	lookupflag 0;
		pos base @U mark @_U ;
		pos base @L mark @_L ;
} AttachMarks ;


lookup AttachMarks2 {
	lookupflag 0;
		pos mark @U_MarkBase mark @_U ;
		pos mark @L_MarkBase mark @_L ;    # attach 1C2C to nukta
} AttachMarks2 ;


#--- Kludge to handle nukta + lower diacritic ---

# Normally the 1C2C diacritic would attach to the lower nukta.  That doesn't work
# presumably because of the reordering that was needed to create the base ligature
# (pulling the nukta out from between the base and the ra/ya).
# So we just shift the diacritic down instead of attaching it.

lookup ShiftNukta1C2C {

	lookupflag 0;
		pos  @RaYaLigs  @N  uni1C2C' <0 -380 0 0> ;
		
} ShiftNukta1C2C ;


#************************************************************
# GSUB features                                             *
#************************************************************

feature ccmp {  # Glyph Composition/Decomposition

  script lepc;
    language dflt;
    
      lookup FontCheck ;
      
      lookup VtlMarkLig;   # do before built-in OT reordering
      
  script DFLT;
    language dflt;
    
      lookup FontCheck ;

      lookup VtlMarkLig ;

      lookup NuktaLigs ;    # InDesign only
      lookup RaYaLigatures ;
		
      lookup Reorder_CryN_VK ;
      lookup Reorder_CryNV_K ;
      lookup Reorder_CryN_delVK ;
      
      lookup Reorder_CryN_VR ;
      lookup Reorder_Cry_VR ;
      lookup Reorder_CryN_V ;
      lookup Reorder_CryN_VallC ;
      lookup Reorder_Cry_V ;
      lookup Reorder_Cry_VallC ;
      
      lookup Reorder_CryN_V_delV ;
      
      lookup Reorder_Vrt_Mt ;

      lookup DeleteBogusNull ;  # harfbuzz actually reorders the bogus null glyph!!
      lookup DeleteBogusNull2 ;
      
} ccmp ;

#--- OpenType reordering occurs here, if there is any left to do. ---

feature clig {  # Contextual Ligatures 

  script lepc;
    language dflt;
    
      # Mark left-side vowels as having been reordered, to avoid another reorder:
      lookup MarkLeftSide ;
    
      lookup RaYaLigatures ;
      
      lookup Reorder_CryN_VK ;
      lookup Reorder_CryNV_K ;
      lookup Reorder_CryN_delVK ;
      
      lookup Reorder_CryN_VR ;
      lookup Reorder_Cry_VR ;
      lookup Reorder_CryN_V ;
      lookup Reorder_Cry_V ;

      lookup Reorder_CryN_V_delV ;
      
      lookup Reorder_Vrt_Mt ;
      
      lookup DeleteBogusNull ;
      lookup DeleteBogusNull2 ;
  
      lookup SignIKang ;
      
  script DFLT;
    language dflt;
      lookup SignIKang ;

} clig ;


#************************************************************
# GPOS features                                             *
#************************************************************

feature mark {

	lookup AttachMarks ;
	lookup AttachMarks2 ;
	
} mark ;


feature dist {

	lookup ShiftNukta1C2C ;
	
} dist ;

